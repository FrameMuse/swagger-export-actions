import fs from "fs"
import yargs from "yargs"
import { hideBin } from "yargs/helpers"

import generateActions from "./generate-actions"
import generateSchemas, { generateSchemasImports } from "./generate-schemas"
import { Paths, Schemas } from "./types"

const argv = yargs(hideBin(process.argv))
  .option("input", {
    alias: "in",
    description: "a docs.json file to parse (input)",
    type: "string"
  })
  .option("output", {
    alias: "out",
    description: "a directory for data (output)",
    type: "string"
  })
  .demandOption("input")
  .demandOption("output")
  .help()
  .alias("help", "h")

  .argv

if (!("output" in argv)) {
  throw new Error("There is no output in `argv`")
}

if (!fs.existsSync(argv.output)) {
  fs.mkdirSync(argv.output, { recursive: true })
}

const inputJson = JSON.parse(fs.readFileSync(argv.input).toString("utf-8"))

const paths: Paths = inputJson.paths
const schemas: Schemas = inputJson.components.schemas

function autoGeneratedCaution() {
  let result = ""

  result += "/**\n"
  result += " * \n"
  result += " * This is auto-generated file.\n"
  result += " * All edits will not be preserved for the next generation.\n"
  result += " * \n"
  result += " * GitHub: https://github.com/FrameMuse/swagger-export-rfl\n"
  result += " * \n"
  result += "*/\n"
  result += "\n"

  return result
}

/* Paths */

{
  const file = fs.openSync(argv.output + "/actions.ts", "w")
  fs.writeSync(file, autoGeneratedCaution())
  fs.writeSync(file, `import { Action } from "../client.types"`)
  fs.writeSync(file, `\n`)
  fs.writeSync(file, generateSchemasImports(schemas))
  fs.writeSync(file, `\n`)
  fs.writeSync(file, generateActions(paths))
  fs.closeSync(file)
}

/* Schemas */

{
  const file = fs.openSync(argv.output + "/schemas.ts", "w")
  fs.writeSync(file, autoGeneratedCaution())
  fs.writeSync(file, generateSchemas(schemas))
  fs.closeSync(file)
}
